#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиента.Клиент КАК Клиент,
		|	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот КАК ДатаПроведенияРабот,
		|	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРабот КАК ВремяНачалаРабот,
		|	ВКМ_ОбслуживаниеКлиента.Ссылка КАК Ссылка,
		|	ВКМ_ОбслуживаниеКлиента.Специалист КАК Специалист
//		|	ВКМ_ОбслуживаниеКлиента.ВыпоненныеРаботы.(ОписаниеРабот КАК ОписаниеРабот) КАК ВыпоненныеРаботы
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента";
	
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();  
	
	Пока Выборка.Следующий() Цикл
	
	ТекстТелеграм = СтрШаблон("Создан Новый документ: Клиент %1, Дата проведения работ %2  Время начала работ %3  Сотрудник %4", 
								Выборка.Клиент, Формат(Выборка.ДатаПроведенияРабот,"ДЛФ=DD;" ), Формат(Выборка.ВремяНачалаРабот,"ДЛФ=DD;"), Выборка.Специалист);	
	
	Если ЭтоНовый() Тогда	
		СоздатьУведомление(ТекстТелеграм);
	ИначеЕсли Не ЭтоНовый() Тогда
		Если Выборка.Специалист <> Специалист Тогда
			НовыйСпециалист = Специалист;
		КонецЕсли;
		Если Выборка.ДатаПроведенияРабот <> ДатаПроведенияРабот Тогда
			НоваяДата = Формат(ДатаПроведенияРабот,"ДЛФ=DD;" );
		КонецЕсли;
		Если Выборка.ВремяНачалаРабот <> ВремяНачалаРабот Тогда
			НовоеВремя = Формат(ВремяНачалаРабот,"ДЛФ=DD;");
		КонецЕсли;
		Если Выборка.Клиент <> Клиент Тогда
			НовыйКлиент = Клиент;
		КонецЕсли;
		ТекстТелеграм = СтрШаблон("Изменен документ %1: Клиент %2, Дата проведения работ %3 Время начала работ %4 Сотрудник %5",
									Выборка.Ссылка, НовыйКлиент, НоваяДата, НовоеВремя, НовыйСпециалист);	
		СоздатьУведомление(ТекстТелеграм);
	
	КонецЕсли;	
КонецЦикла;	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ,Режим)      
// Движение по регистру накопления ВыполненныеКлиентуРаботы
 Запрос = Новый Запрос;
 Запрос.Текст =
 	"ВЫБРАТЬ
 	|	ДоговорыКонтрагентов.Владелец КАК Клиент,
 	|	ДоговорыКонтрагентов.ВКМ_НачалоДействия КАК НачалоДействия,
 	|	ДоговорыКонтрагентов.ВКМ_ОкончаниеДействия КАК ОкончаниеДействия,
 	|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧасаРаботы КАК СтоимостьЧасаРаботы,
 	|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора
 	|ИЗ
 	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
 	|ГДЕ
 	|	ДоговорыКонтрагентов.Владелец = &Владелец";
 
 Запрос.УстановитьПараметр("Владелец", Клиент);
 
 ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
 Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
 
 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
 	
 	Если ВыборкаДетальныеЗаписи.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание")
 	                 И ВыборкаДетальныеЗаписи.НачалоДействия <= ДатаПроведенияРабот 
 	                 И ВыборкаДетальныеЗаписи.ОкончаниеДействия >= ДатаПроведенияРабот Тогда 
 	                     	
 	     Для Каждого ТекСтрока из ВыполненныеРаботы Цикл
 	   		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
			Движение.Период = Дата;
			Движение.Клиент = Клиент;
			Движение.Договор = Договор;
			Движение.КоличествоЧасов = ТекСтрока.ЧасыКОплатеКлиенту;
			Движение.СуммаКОплате = ВыборкаДетальныеЗаписи.СтоимостьЧасаРаботы * ТекСтрока.ЧасыКОплатеКлиенту;		
 	     КонецЦикла;	
 	     
 	КонецЕсли;
 	
 КонецЦикла;

// Движение по регистру накопления ВыполненныеСотрудникомРаботы	
Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот
	|ИЗ
	|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Дата, ) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
	|ГДЕ
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Специалист);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;  
		Сообщить("Отсутствует значение процента от работы для указанного специалиста!"); 
		Возврат; 
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина; 
	Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить(); 
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход; 
	Движение.Период = Дата; 
	Движение.Сотрудник = Специалист; 
	Движение.ЧасовКОплате = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту"); 
	
	ЧасовКОплатеКлиенту = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");   
	СтавкаЧасаКлиента = Договор.ВКМ_СтоимостьЧасаРаботы; 
	ПроцентОтРабот = ВыборкаДетальныеЗаписи.ПроцентОтРабот; 
    
    Движение.СуммаКОплате = ЧасовКОплатеКлиенту * СтавкаЧасаКлиента * ПроцентОтРабот / 100; 
	
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записать(); 


КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьУведомление(ТекстТелеграм) 
	
	НовыйЭлемент = Справочники.ВКМ_УведомленияТГБоту.СоздатьЭлемент(); 
	НовыйЭлемент.Текст = ТекстТелеграм; 
	НовыйЭлемент.Записать();    
	
КонецПроцедуры

#КонецОбласти
#КонецЕсли